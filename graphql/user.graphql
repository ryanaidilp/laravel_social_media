extend type Query @guard {
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
        username: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    followers(id: ID @eq): [User!]! @paginate
}

extend type Mutation {
    createUser(
        name: String! @rules(apply: ["min:4"])
        email: String! @rules(apply: ["email", "unique:users"])
        password: String! @rules(apply: ["min:8"])
        username: String! @rules(apply: ["min:3", "unique:users"])
    ): User! @create
    updateUser(
        id: ID!
        name: String! @rules(apply: ["min:4"])
        email: String! @rules(apply: ["email", "unique:users"])
    ): User! @update
    updatePassword(id: ID!, password: String! @rules(apply: ["min:8"])): User!
        @update
    uploadProfilePicture(id: ID!, photo: Upload!): User!
    deleteUser(id: ID!): User @delete
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique username."
    username: String!

    "Profile picture of the user."
    photo: String

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    post_count: Int!

    followers_count: Int!

    following_count: Int!

    posts: [Post]! @hasMany
}
